<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>7. GENERATED CONTENT on FedRAMP Automation</title><link>https://rene2mt.github.io/guides/ssp/7/</link><description>Recent content in 7. GENERATED CONTENT on FedRAMP Automation</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://rene2mt.github.io/guides/ssp/7/index.xml" rel="self" type="application/rss+xml"/><item><title>7.1 Generating the Control Information Summary (CIS)</title><link>https://rene2mt.github.io/guides/ssp/7/7.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rene2mt.github.io/guides/ssp/7/7.1/</guid><description>There are many ways a tool developer can generate the CIS. FedRAMP is developing an Extensible Stylesheet Language Transformation (XSLT) file to generate the FedRAMP CIS. When ready, FedRAMP will make this freely available to the public here:
https://github.com/GSA/fedramp-automation/tree/master/dist/content/resources</description></item><item><title>7.2 Generating the Customer Responsibility Matrix (CRM)</title><link>https://rene2mt.github.io/guides/ssp/7/7.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rene2mt.github.io/guides/ssp/7/7.2/</guid><description>There are many ways a tool developer can generate the CRM. FedRAMP is developing an XSLT file to generate the FedRAMP CRM. When ready, FedRAMP will make this freely available to the public here:
https://github.com/GSA/fedramp-automation/tree/master/dist/content/resources
** Useful CRM X-Path Queries** 1 2 3 4 5 &amp;lt;!-- Flat-File CRM Query: --&amp;gt; //control-implementation/implemented-requirement/prop[@name=&amp;#34;control-origination&amp;#34;][@ns=&amp;#34;https://fedramp.gov/ns/oscal&amp;#34;][@value=&amp;#34;customer-configured&amp;#34; or @value=&amp;#34;customer-provided&amp;#34;]/remarks/node() &amp;lt;!-- Component-based CRM Query: --&amp;gt; //control-implementation/implemented-requirement/statement/by-component[@component-id=&amp;#34;customer&amp;#34;]/description</description></item><item><title>Appendix A- WORKING WITH COMPONENTS</title><link>https://rene2mt.github.io/guides/ssp/7/appendix-a/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rene2mt.github.io/guides/ssp/7/appendix-a/</guid><description>NIST designed OSCAL such that a system architect can express all aspects of the system as components. A component is anything that can satisfy a control requirement. This includes hardware, software, services, and underlying service providers, as well as policies, plans, and procedures. There are several ways to use components in an OSCAL-based SSP. The following defines FedRAMP's minimum initial use.
This section will likely be updated as NIST continues to evolve its approach to components in OSCAL, and as FedRAMP receives feedback from stakeholders.</description></item><item><title>APPENDIX B- CONVERTING A LEGACY SSP TO OSCAL</title><link>https://rene2mt.github.io/guides/ssp/7/appendix-b/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rene2mt.github.io/guides/ssp/7/appendix-b/</guid><description>NIST designed OSCAL such that a system architect can express all aspects of the system as components. A component is anything that can satisfy a control requirement. This includes hardware, software, services, and underlying service providers, as well as policies, plans, and procedures.
OSCAL is also designed to support legacy conversion of SSPs without individual components defined, and enables an SSP author to migrate to the component approach gradually over time.</description></item><item><title>Appendix A- WORKING WITH COMPONENTS</title><link>https://rene2mt.github.io/guides/ssp/7/ssp-appendix-a/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rene2mt.github.io/guides/ssp/7/ssp-appendix-a/</guid><description>NIST designed OSCAL such that a system architect can express all aspects of the system as components. A component is anything that can satisfy a control requirement. This includes hardware, software, services, and underlying service providers, as well as policies, plans, and procedures. There are several ways to use components in an OSCAL-based SSP. The following defines FedRAMP's minimum initial use.
This section will likely be updated as NIST continues to evolve its approach to components in OSCAL, and as FedRAMP receives feedback from stakeholders.</description></item><item><title>APPENDIX B- CONVERTING A LEGACY SSP TO OSCAL</title><link>https://rene2mt.github.io/guides/ssp/7/ssp-appendix-b/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rene2mt.github.io/guides/ssp/7/ssp-appendix-b/</guid><description>NIST designed OSCAL such that a system architect can express all aspects of the system as components. A component is anything that can satisfy a control requirement. This includes hardware, software, services, and underlying service providers, as well as policies, plans, and procedures.
OSCAL is also designed to support legacy conversion of SSPs without individual components defined, and enables an SSP author to migrate to the component approach gradually over time.</description></item></channel></rss>